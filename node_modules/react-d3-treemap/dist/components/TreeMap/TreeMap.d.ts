import * as React from "react";
import { HierarchyRectangularNode } from "d3-hierarchy";
import { NumberOfChildrenPlacement } from "../Node";
import { ITreeMapProps, ColorModel } from "./ITreeMapProps";
import { ITreeMapState } from "./ITreeMapState";
export interface CustomHierarchyRectangularNode<TreeMapInputData> extends HierarchyRectangularNode<TreeMapInputData> {
    customId: number;
}
declare class TreeMap<TreeMapInputData> extends React.Component<ITreeMapProps<TreeMapInputData>, ITreeMapState<TreeMapInputData>> {
    static defaultProps: {
        id: string;
        data: any;
        height: number;
        width: number;
        valueFormat: string;
        disableBreadcrumb: boolean;
        colorModel: ColorModel;
        paddingInner: number;
        paddingOuter: number;
        customD3ColorScale: import("d3-scale").ScaleSequential<string, never>;
        namePropInData: string;
        linkPropInData: string;
        valuePropInData: string;
        childrenPropInData: string;
        numberOfChildrenPlacement: NumberOfChildrenPlacement;
        darkNodeTextColor: string;
        darkNodeBorderColor: string;
        lightNodeTextColor: string;
        lightNodeBorderColor: string;
        disableTooltip: boolean;
        tooltipOffsetX: number;
        tooltipOffsetY: number;
        levelsToDisplay: number;
    };
    constructor(props: ITreeMapProps<TreeMapInputData>);
    componentDidMount(): void;
    UNSAFE_componentWillReceiveProps(nextProps: ITreeMapProps<TreeMapInputData>): void;
    render(): React.ReactNode;
    private _getNode;
    private _onBreadcrumbItemClicked;
    private _onNodeClick;
    private _getColorsFromNode;
    private _zoomTo;
    resetZoom(): void;
    zoomOut(): void;
    getZoomLevel(): number;
}
export default TreeMap;
