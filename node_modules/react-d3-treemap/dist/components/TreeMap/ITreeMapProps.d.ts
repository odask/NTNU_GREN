/// <reference types="react" />
import { ScaleSequential } from "d3-scale";
import TreeMap from "../TreeMap";
import { IBreadcrumbItem } from "../Breadcrumb";
import { NumberOfChildrenPlacement } from "../Node";
import { TooltipPlacement } from "../Tooltip/types";
export interface ITreeMapProps<TreeMapInputData> {
    id: string;
    width: number;
    height: number;
    data: TreeMapInputData;
    valueUnit?: string;
    valueFormat?: string;
    disableBreadcrumb?: boolean;
    colorModel?: ColorModel;
    hideNumberOfChildren?: boolean;
    hideValue?: boolean;
    className?: string;
    svgClassName?: string;
    nodeClassName?: string;
    breadCrumbClassName?: string;
    svgStyle?: React.CSSProperties;
    nodeStyle?: React.CSSProperties;
    paddingOuter?: number;
    paddingInner?: number;
    customD3ColorScale?: ScaleSequential<string>;
    namePropInData?: string;
    linkPropInData?: string;
    valuePropInData?: string;
    childrenPropInData?: string;
    onZoom?: (zoomLevel: number, zoomId: number, breadcrumbItems: IBreadcrumbItem[]) => void;
    onTreeMapDidMount?: (treeMap: TreeMap<TreeMapInputData>) => void;
    numberOfChildrenPlacement: NumberOfChildrenPlacement;
    darkNodeTextColor?: string;
    darkNodeBorderColor?: string;
    lightNodeTextColor?: string;
    lightNodeBorderColor?: string;
    valueFn?: (value: number) => string;
    tooltipPlacement?: TooltipPlacement;
    tooltipClassName?: string;
    disableTooltip?: boolean;
    tooltipOffsetX?: number;
    tooltipOffsetY?: number;
    levelsToDisplay?: number;
    splitRegExp?: RegExp;
}
export declare enum ColorModel {
    Depth = 0,
    Value = 1,
    NumberOfChildren = 2,
    OneEachChildren = 3
}
