[{"/Users/odaskaug/Documents/ntnu_gren/src/index.js":"1","/Users/odaskaug/Documents/ntnu_gren/src/reportWebVitals.js":"2","/Users/odaskaug/Documents/ntnu_gren/src/App.js":"3","/Users/odaskaug/Documents/ntnu_gren/src/components/Treemap.js":"4","/Users/odaskaug/Documents/ntnu_gren/src/components/data.js":"5"},{"size":500,"mtime":1632428528504,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1632428528506,"results":"8","hashOfConfig":"7"},{"size":477,"mtime":1632467516129,"results":"9","hashOfConfig":"7"},{"size":3896,"mtime":1632441852079,"results":"10","hashOfConfig":"7"},{"size":1756,"mtime":1632441994873,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1tpauxn",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/Users/odaskaug/Documents/ntnu_gren/src/index.js",[],["24","25"],"/Users/odaskaug/Documents/ntnu_gren/src/reportWebVitals.js",[],"/Users/odaskaug/Documents/ntnu_gren/src/App.js",[],"/Users/odaskaug/Documents/ntnu_gren/src/components/Treemap.js",["26"],"\nimport { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\n\nexport default function Treemap({ data, width, height }) {\n  const svgRef = useRef(null);\n  const legendRef = useRef(null);\n\n  function renderTreemap() {\n    const svg = d3.select(svgRef.current);\n    svg.selectAll('g').remove();\n\n    const legendContainer = d3.select(legendRef.current);\n    legendContainer.selectAll('g').remove();\n\n    svg.attr('width', width).attr('height', height);\n\n    // create root node\n    const root = d3\n      .hierarchy(data)\n      .sum((d) => d.value)\n      .sort((a, b) => b.value - a.value);\n\n    // create treemap layout\n    const treemapRoot = d3.treemap().size([width, height]).padding(1)(root);\n\n    // create 'g' element nodes based on data\n    const nodes = svg\n      .selectAll('g')\n      .data(treemapRoot.leaves())\n      .join('g')\n      .attr('transform', (d) => `translate(${d.x0},${d.y0})`);\n\n    // create color scheme and fader\n    const fader = (color) => d3.interpolateRgb(color, '#0000')(0.3);\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10.map(fader));\n\n    // add treemap rects\n    nodes\n      .append('rect')\n      .attr('width', (d) => d.x1 - d.x0)\n      .attr('height', (d) => d.y1 - d.y0)\n      .attr('fill', (d) => (d.data.color));\n\n    const fontSizeTitle = 18;\n\n    // add text to rects\n    nodes\n      .append('text')\n      .text((d) => `${d.data.name} ${d.data.value}`)\n      .attr('data-width', (d) => d.x1 - d.x0)\n      .attr('font-size', `${20}px`)\n      .attr('x', 15)\n      .attr('y', 35)\n      .call(wrapText)\n      .style(\"fill\", \"white\");\n\n    function wrapText(selection) {\n      selection.each(function () {\n        const node = d3.select(this);\n        const rectWidth = +node.attr('data-width');\n        let word;\n        const words = node.text().split(' ').reverse();\n        let line = [];\n        let lineNumber = 0;\n        const x = node.attr('x');\n        const y = node.attr('y');\n        let tspan = node.text('').append('tspan').attr('x', x).attr('y', y);\n        while (words.length > 1) {\n          word = words.pop();\n          line.push(word);\n          tspan.text(line.join(' '));\n          const tspanLength = tspan.node().getComputedTextLength();\n          if (tspanLength > rectWidth && line.length !== 1) {\n            line.pop();\n            tspan.text(line.join(' '));\n            line = [word];\n            tspan = addTspan(word);\n          }\n        }\n        addTspan(words.pop());\n\n        function addTspan(text) {\n          lineNumber += 1;\n          return node\n            .append('tspan')\n            .attr('x', x)\n            .attr('font-size', `${16}px`)\n            .attr('y', y)\n            .attr('dy', `${lineNumber * 30}px`)\n            .text(text)\n            .style(\"fill\", \"white\");\n        }\n      });\n    }\n\n    // pull out hierarchy categories\n    let categories = root.leaves().map((node) => node.data.category);\n    categories = categories.filter(\n      (category, index, self) => self.indexOf(category) === index,\n    );\n\n    legendContainer.attr('width', width).attr('height', height / 4);\n\n    // create 'g' elements based on categories\n    const legend = legendContainer.selectAll('g').data(categories).join('g');\n\n    // create 'rects' for each category\n    legend\n      .append('rect')\n      .attr('width', fontSizeTitle)\n      .attr('height', fontSizeTitle)\n      .attr('x', fontSizeTitle)\n      .attr('y', (_, i) => fontSizeTitle * 2 * i)\n      .attr('fill', (d) => colorScale(d));\n\n    // add text to each category key\n    legend\n      .append('text')\n      .attr('transform', `translate(0, ${fontSizeTitle})`)\n      .attr('x', fontSizeTitle * 3)\n      .attr('y', (_, i) => fontSizeTitle * 2 * i)\n      .style('font-size', fontSizeTitle)\n      .text((d) => d);\n  }\n\n  useEffect(() => {\n    renderTreemap();\n  }, [data]);\n\n  return (\n    <div>\n      <svg ref={svgRef} />\n    </div>\n  );\n}","/Users/odaskaug/Documents/ntnu_gren/src/components/data.js",[],{"ruleId":"27","replacedBy":"28"},{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","severity":1,"message":"32","line":129,"column":6,"nodeType":"33","endLine":129,"endColumn":12,"suggestions":"34"},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'renderTreemap'. Either include it or remove the dependency array.","ArrayExpression",["37"],"no-global-assign","no-unsafe-negation",{"desc":"38","fix":"39"},"Update the dependencies array to be: [data, renderTreemap]",{"range":"40","text":"41"},[3821,3827],"[data, renderTreemap]"]